[
  {
    "objectID": "posts/post-with-code/post.html",
    "href": "posts/post-with-code/post.html",
    "title": "Jupyter Testing",
    "section": "",
    "text": "!pwd\n\n/Users/daniel.hunter/code/myblog/posts/post-with-code\n\n\n\nimg = Image.open(Path.home() / 'Downloads' / 'AvatarAI.me' / '61.jpg')\n\n\nimg\n\n\n\n\n\nimport numpy as np\nimport torch\nfrom torchvision import transforms\n\nmean = np.array([0.485, 0.456, 0.406])\nstd = np.array([0.229, 0.224, 0.225])\n\npreprocess = transforms.Compose([transforms.ToTensor(), transforms.Normalize(mean, std)])\n\n\ndef deprocess(image_np):\n    image_np = image_np.squeeze().transpose(1, 2, 0)\n    image_np = image_np * std.reshape((1, 1, 3)) + mean.reshape((1, 1, 3))\n    image_np = np.clip(image_np, 0.0, 255.0)\n    return image_np\n\n\ndef clip(image_tensor):\n    for c in range(3):\n        m, s = mean[c], std[c]\n        image_tensor[0, c] = torch.clamp(image_tensor[0, c], -m / s, (1 - m) / s)\n    return image_tensor\n\n\nfrom torch.autograd import Variable\nfrom tqdm.auto import tqdm\nimport scipy.ndimage as nd\n\n\ndef dream(image, model, iterations, lr):\n    \"\"\" Updates the image to maximize outputs for n iterations \"\"\"\n    Tensor = torch.cuda.FloatTensor if torch.cuda.is_available() else torch.FloatTensor\n    image = Variable(Tensor(image), requires_grad=True)\n    for i in range(iterations):\n        model.zero_grad()\n        out = model(image)\n        # label = [00000,1,00000]\n        label = torch.zeros(1, dtype=torch.long)\n        label[0] = 779\n        loss = nn.CrossEntropyLoss()(out, label)\n        # import pdb ; pdb.set_trace()\n        # loss = out.norm()\n        loss.backward()\n        avg_grad = np.abs(image.grad.data.cpu().numpy()).mean()\n        norm_lr = lr / avg_grad\n        image.data += norm_lr * image.grad.data\n        image.data = clip(image.data)\n        image.grad.data.zero_()\n    return image.cpu().data.numpy()\n\n\ndef deep_dream(image, model, iterations, lr, octave_scale, num_octaves):\n    \"\"\" Main deep dream method \"\"\"\n    image = preprocess(image).unsqueeze(0).cpu().data.numpy()\n\n    # Extract image representations for each octave\n    octaves = [image]\n    for _ in range(num_octaves - 1):\n        octaves.append(nd.zoom(octaves[-1], (1, 1, 1 / octave_scale, 1 / octave_scale), order=1))\n\n    detail = np.zeros_like(octaves[-1])\n    for octave, octave_base in enumerate(tqdm(octaves[::-1], desc=\"Dreaming\")):\n        if octave > 0:\n            # Upsample detail to new octave dimension\n            detail = nd.zoom(detail, np.array(octave_base.shape) / np.array(detail.shape), order=1)\n        # Add deep dream detail from previous octave to new base\n        input_image = octave_base + detail\n        # Get new deep dream image\n        dreamed_image = dream(input_image, model, iterations, lr)\n        # Extract deep dream details\n        detail = dreamed_image - octave_base\n\n    return deprocess(dreamed_image)\n\n\nimport torch\nfrom torch import nn\nfrom torchvision import models\n\n# Define the model\nnetwork = models.vgg19(weights=models.VGG19_Weights.DEFAULT)\n# layers = list(network.features.children())\nmodel = network # nn.Sequential(*layers[: (27 + 1)])\nif torch.cuda.is_available():\n    model = model.cuda()\n# print(network)\n\n# Extract deep dream image\ndreamed_image = deep_dream(\n    img,\n    model,\n    iterations=30,\n    lr=0.03,\n    octave_scale=1.4,\n    num_octaves=5,\n)\n\n\n\n\n\nviz(dreamed_image)\n\n\n\n\n\nnp.array(img).shape\n\n(512, 512, 3)\n\n\n\nnd.zoom(np.array(img), (1 / 1.4, 1 / 1.4, 1), order=1).shape\n\n(366, 366, 3)\n\n\n\nlen(dreamed_image)\n\n10\n\n\n\nfrom more_itertools import zip_equal\nimport matplotlib.pyplot as plt\n\ndef prep_img(arr):\n    if isinstance(arr, Image.Image):\n        arr = np.array(arr)\n    arr = arr.squeeze()\n    if arr.shape[0] == 3:\n        arr = arr.transpose((1,2,0))\n    _H, _W, C = arr.shape\n    assert C == 3, arr.shape\n    if arr.dtype in [np.float32, np.float64]:\n        arr = np.clip(a=arr, a_min=0, a_max=1)\n    elif arr.dtype in [np.uint8]:\n        arr = np.clip(a=arr, a_min=0, a_max=255)\n    else:\n        raise ValueError(arr.dtype)\n    return arr\n\ndef viz(*arrs, ncols=1):\n    fig, axs = plt.subplots(nrows=len(arrs), ncols=ncols, figsize=(20,20), squeeze=False)\n    for arr, ax in zip_equal(arrs, axs.ravel()):\n        # import pdb ; pdb.set_trace()\n        ax.imshow(prep_img(arr))\n\n\nviz(\n    # dreamed_image[0],\n    # dreamed_image[5],\n    # dreamed_image[9],\n    nd.zoom(np.array(img), (1 / 3, 1 / 3, 1), order=1),\n    img,\n)"
  },
  {
    "objectID": "posts/deep-dream/post.html",
    "href": "posts/deep-dream/post.html",
    "title": "Getting Quarto to execute code blocks",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam suscipit est nec dui eleifend, at dictum elit ullamcorper. Aliquam feugiat dictum bibendum. Praesent fermentum laoreet quam, cursus volutpat odio dapibus in. Fusce luctus porttitor vehicula. Donec ac tortor nisi. Donec at lectus tortor. Morbi tempor, nibh non euismod viverra, metus arcu aliquet elit, sed fringilla urna leo vel purus."
  },
  {
    "objectID": "posts/deep-dream/post.html#merriweather",
    "href": "posts/deep-dream/post.html#merriweather",
    "title": "Getting Quarto to execute code blocks",
    "section": "Merriweather",
    "text": "Merriweather\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nam suscipit est nec dui eleifend, at dictum elit ullamcorper. Aliquam feugiat dictum bibendum. Praesent fermentum laoreet quam, cursus volutpat odio dapibus in. Fusce luctus porttitor vehicula. Donec ac tortor nisi. Donec at lectus tortor. Morbi tempor, nibh non euismod viverra, metus arcu aliquet elit, sed fringilla urna leo vel purus."
  },
  {
    "objectID": "posts/deep-dream/post.html#code",
    "href": "posts/deep-dream/post.html#code",
    "title": "Getting Quarto to execute code blocks",
    "section": "3 - Code",
    "text": "3 - Code\nThis is inline code plus a small code chunk.\n\nprint(f'Daniel has {2+2=} apples')\n\nDaniel has 2+2=4 apples"
  },
  {
    "objectID": "posts/welcome/post.html",
    "href": "posts/welcome/post.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "My time in DC\n\n\n\n\n\nVisiting the Capitol\n\n\n\n\n\n\nDec 24, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJupyter Testing\n\n\n\n\n\nReviving Deep Dream\n\n\n\n\n\n\nNov 4, 2022\n\n\nDaniel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGetting Quarto to execute code blocks\n\n\n\n\n\nReviving Deep Dream\n\n\n\n\n\n\nOct 5, 2022\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\n\n\n\nOct 4, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Daniel",
    "section": "",
    "text": "I’m a machine learning engineer.\nI shipped many safety critical features at Tesla Autopilot, working on FSD.\nI helped on the transition team at Twitter.\nI like to kite surf and tweet too much.\nI enjoy bike shedding over knowledge management systems."
  },
  {
    "objectID": "posts/my-time-in-dc/post.html",
    "href": "posts/my-time-in-dc/post.html",
    "title": "My time in DC",
    "section": "",
    "text": "I ran out of the huge glass doors of my hotel, expecting a face full of cold air. It was 4AM and pitch black outside, so I was shocked to feel warm humidity wash over my body as I left the hotel. Shrugging, I jogged on, following the street lights towards the Lincoln Memorial.\nIt was my second time in Washington DC, but my impression was the same: this is an amazing city full of history and cultural significance. This isn’t anything groundbreaking, but there’s a stark difference between the west coast and the east coast that I didn’t fully appreciate until I was in my late teenage years. As I watched the sun rise from the steps of the Lincoln Memorial, sweating in the humid air from my morning run, I had a distinct feeling of national pride that just doesn’t come from my morning run in San Francisco.\nIt sounds cliche, but the air genuinely felt different. I mean, it was humid as hell — so the air literally felt different, but beyond that: there was more ambition and stature in a way that SF doesn’t have. I love the tech entrepreneur vibes of Silicon Valley, but the architecture, statues, and monuments throughout DC make a clear statement: America does not mess around. I can’t imagine being a foreign diplomat or royalty on a visit to Washington, driving through this impressive city on a mission to negotiate with someone — I’d be intimidated before I even began the conversation!\nOn a more personal level, I was reminded of this same feeling the first time I wore a tailored suit, and the first time I wore a properly nice submariner watch. Even relatively simple outfit additions created meaningful behavior change for me. I carried myself differently, took myself more seriously, spoke more slowly. To this day, if I need a “confidence injection” for a big meeting or something, wearing a nice watch really has an impact.\nOkay — we can see how this plays out on a city-level: have a bunch of great architecture and monuments, and your citizens behave differently. And on a personal level: wear nice clothes, and you view yourself differently, which makes others view you differently.\nBut how do you add “stature improvements” to a small group? Or put another way… how do you build culture at your startup? Making everyone wear a nice watch or erecting a monument in the office probably isn’t the right move (this basically sounds like an episode of Billions). Put the mission statement on the wall, phrased in such a way that everyone is excited about it (”Our mission is to accelerate the world’s transition to sustainable energy”)? That’s a good start, but there’s more to the puzzle. Hiring the right people is obvious, but much easier said than done. There’s no magic bullet for customer building, but it’s useful to look at how nations and people do it — just another way that travel expands your horizons (literally) and gives you new ideas."
  }
]